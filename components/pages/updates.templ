package pages 

import (
	"collector/components"
	"collector/pkg/recollection/model"
	"collector/pkg/time_ru_format.go"
	"time"
)

type Item struct {
	Name       string
	Identifier string
	Status     model.Status
	Changes    []Change
	Date       *time.Time
}

func timeNow() *time.Time {
	t := time.Now()
	return &t
}

type Change struct {
	TextOld string
	TextNew string
}

templ FormList(items []Item) {
	@components.Layout("Updates") {
		<div class="bg-gray-100 p-8">
			<div class="max-w-6xl mx-auto bg-white shadow-md rounded-lg overflow-hidden">
				<ul class="divide-y divide-gray-200">
					for _, item := range items {
						<li class="p-2">
							<div class="flex items-center space-x-4 rounded-md">
								@statusBadgeFromText(item.Status, item.Date)
								<span class="text-sm">{ item.Name }</span>
								//<span class="text-sm text-gray-500 cursor-help" title={ item.Identifier }>ℹ️</span>
							</div>
							if len(item.Changes) > 0 {
								for _, change := range item.Changes {
									<ul class="pl-8 mt-1">
										@fillItemChange(change)
									</ul>
								}
							}
						</li>
					}
				</ul>
			</div>
		</div>
	}
}

func statusToText(status model.Status) string {
	switch status {
	case model.StatusNew:
		return "Новое"
	case model.StatusRemoved:
		return "Удалено"
	case model.StatusUpdated:
		return "Обновлено"
	default:
		return ""
	}
}

func statusToColorClasses(status model.Status) string {
	switch status {
	case model.StatusNew:
		return "bg-green-100 text-green-800 dark:bg-gray-700 dark:text-green-400 border border-green-400"
	case model.StatusRemoved:
		return "bg-red-100 text-red-800  dark:bg-gray-700 dark:text-red-400 border border-red-400"
	case model.StatusUpdated:
		return "bg-yellow-100 text-yellow-800 dark:bg-gray-700 dark:text-yellow-300 border border-yellow-300"
	default:
		return ""
	}
}

templ statusBadgeFromText(status model.Status, date *time.Time) {
	<div class={ "text-xs font-medium py-0.5 rounded w-20 justify-center text-center" + " " + statusToColorClasses(status) }>
		<div>
			{  statusToText(status) }
			<br/>
		</div>
		<div class="text-xxs">
			{ time_ru_format.Format(date) }
		</div>
	</div>
}

templ fillItemChange(change Change) {
	if len(change.TextOld) > 0  && len(change.TextNew) > 0 {
		<li class="flex overflow-hidden rounded-t-xl">
			<div class="px-2 py-2 bg-red-300">
				@changeStatusIconSVG(false)
			</div>
			<div class="text-xs  px-2 py-1 flex-grow bg-red-200 content-center ">{ change.TextOld }</div>
		</li>
		<li class="flex overflow-hidden rounded-b-xl">
			<div class="px-2 py-2 bg-green-400">
				@changeStatusIconSVG(true)
			</div>
			<div class="text-xs px-2 py-1 flex-grow bg-green-200 content-center">{ change.TextNew }</div>
		</li>
	} else if len(change.TextOld) > 0 {
		<li class="flex overflow-hidden rounded-xl">
			<div class="px-2 py-2 bg-red-300">
				@changeStatusIconSVG(false)
			</div>
			<div class="text-xs px-2 py-1 flex-grow bg-red-200 content-center">{ change.TextOld }</div>
		</li>
	} else if len(change.TextNew) > 0 {
		<li class="flex overflow-hidden rounded-xl">
			<div class="px-2 py-2 bg-green-400">
				@changeStatusIconSVG(true)
			</div>
			<div class="text-xs px-2 py-1 flex-grow bg-green-200 content-center">{ change.TextNew }</div>
		</li>
	}
}

templ changeStatusIconSVG(bPlus bool) {
	<svg
		class="h-5 w-5"
		viewBox="0 0 1024 1024"
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		fill="#000000"
	>
		<g id="SVGRepo_bgCarrier" stroke-width="0"></g>
		<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
		<g id="SVGRepo_iconCarrier">
			<path d="M512 512m-448 0a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill={ colorForStatusIconSvg(bPlus) }></path>
			if bPlus {
				<path d="M448 298.666667h128v426.666666h-128z" fill="#FFFFFF"></path>
			}
			<path d="M298.666667 448h426.666666v128H298.666667z" fill="#FFFFFF"></path>
		</g>
	</svg>
}

func colorForStatusIconSvg(bPlus bool) string {
	if bPlus {
		return "#00ba00"
	} else {
		return "#ff0000"
	}
}
