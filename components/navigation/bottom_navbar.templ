package navigation

script navbarVisibleToggler() {
	var prevScrollpos = window.pageYOffset;
	var scrollCapacity = 0;
	var stateActive = true
	var stateByDirectionPrev = true
	window.onscroll = function() {
		var currentScrollPos = window.pageYOffset;
		const delta = currentScrollPos - prevScrollpos;
		prevScrollpos = currentScrollPos;
		scrollCapacity += Math.abs(delta);

		// reset capacity if direction changed
		const stateByDirection = delta > 0 ? false : true;
		if (stateByDirection != stateByDirectionPrev)
			scrollCapacity = 0;
		stateByDirectionPrev = stateByDirection;

		// do nothing if states matched
		if (stateActive == stateByDirection)
			return;

		// do nothing if target capacity not matched
		if (scrollCapacity <= innerHeight * (stateByDirection ? 0.2 : 1))
			return;

		// toggle visibility
		document.getElementById("navbar").classList.toggle('translate-y-20');
		stateActive = stateByDirection
	}
}

templ Navbar() {
	<div id="navbar" class="fixed z-50 bottom-0 center-absolute bg-opacity-85 bg-gray-700 p-2 rounded-t-[2rem] ease-in-out duration-1000">
		<div class="flex flexflex-wrap-reverse h-14">
			@navButtonItem(navButtonSingle) {
				@clickableCollider("/")
				@navButtonWithTooltip(svgHomeIcon(), "Home", "", standardButtonSizeStyle)
			}
			@navSeparator()
			<div class="flex rounded-full">
				@navButtonItem(navButtonGroupBeg) {
					@clickableCollider("/animelayer/anime")
					@navButtonWithTooltip(svgAnimeIcon(), "AnimeLayer Anime", "", shiftedButtonSizeStyle)
				}
				@navButtonItem(navButtonGroupEnd) {
					@clickableCollider("/animelayer/anime/updates")
					@navButtonWithTooltip(svgHistoryIcon(), "Anime Updates", "", narrowButtonSizeStyle)
				}
			</div>
			@navSeparator()
			<div class="flex rounded-full">
				@navButtonItem(navButtonGroupBeg) {
					@clickableCollider("/animelayer/manga")
					@navButtonWithTooltip(svgMangaIcon(), "AnimeLayer Manga", "", shiftedButtonSizeStyle)
				}
				@navButtonItem(navButtonGroupEnd) {
					@clickableCollider("/animelayer/manga/updates")
					@navButtonWithTooltip(svgHistoryIcon(), "Manga Updates", "", narrowButtonSizeStyle)
				}
			</div>
			@navSeparator()
			@navButtonItem(navButtonSingle) {
				@clickableCollider("/profile")
				@navButtonWithTooltip(svgProfileIcon(), "Profile", "", standardButtonSizeStyle)
			}
		</div>
	</div>
	@navbarVisibleToggler()
}

templ clickableCollider(routeTarget string) {
	<a href={ templ.SafeURL(routeTarget) } class="absolute w-full h-full select-none hidden group-hover:block z-50"></a>
}

const shiftedButtonSizeStyle class = "translate-x-2 pt-4 px-4"
const standardButtonSizeStyle class = "pt-4 px-4"
const narrowButtonSizeStyle class = "pt-4 px-2"

templ navButtonWithTooltip(icon templ.Component, tooltipText string, text string, style class) {
	@textTooptip(tooltipText)
	<div class={ style.String() }>
		<button type="button">
			<div class="flex">
				@icon
				if len(text) > 0 {
					<span class="-translate-y-1">{ text }</span>
				}
				<span class="sr-only">{ tooltipText }</span>
			</div>
		</button>
	</div>
}

templ navButtonItem(btnType navButtonType) {
	<div class={ "relative group bn-colors" + navButtonStyle(btnType).String() }>
		{ children... }
	</div>
}

templ navSeparator() {
	<div class="p-1"></div>
}

templ textTooptip(text string) {
	<div class="relative -translate-y-11">
		<div
			class="absolute center-absolute
			text-nowrap
		 top-0 px-3 h-8 py-1
		 text-sm font-medium 
		 rounded-lg shadow-sm
		 transition-opacity duration-300 
		 opacity-0 group-hover:opacity-100
		 invisible group-hover:visible
		 select-none
		 text-white
		 bg-gray-900
		 dark:bg-gray-700"
		>
			{ text }
		</div>
		<svg
			viewBox="0 0 18 18"
			class="absolute center-absolute
		top-5 w-8 h-7
		transition-opacity duration-300 
		opacity-0 group-hover:opacity-100
		invisible group-hover:visible"
			version="1.1"
			xmlns="http://www.w3.org/2000/svg"
			fill="#000000"
		>
			<path d="M4,7 L9,13 L14,7 L4,7 L4,7 Z" id="path" fill="#000000"></path>
		</svg>
	</div>
}
