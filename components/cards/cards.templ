package cards

import (
	"github.com/dmji/gosudarevlist/components/scripts"
	"github.com/dmji/gosudarevlist/internal/presenter/model"
	"github.com/dmji/gosudarevlist/pkg/enums"
	"strings"
)

const (
	noImagePlaceholder = "/assets/images/no_image.webp"
	animeLayerLogo     = "/assets/images/animelayer_logo.webp"
)

func queryPosterFromItem(description *model.ItemCartHrefData) string {

	if img := description.Image; len(img) > 0 {
		return img
	}

	return noImagePlaceholder
}

templ optionalLineMetaData(title, value string, bLast ...bool) {
	if len(value) > 0 && len(bLast) == 0 {
		<div class="text-gray-400 text-sm">{ title }</div>
	}
	if len(value) > 0 {
		<div class="px-1 text-sm">{ value }</div>
	}
	if len(value) > 0 && len(bLast) == 0 {
		<span class="px-1 text-sm">| </span>
	}
}

templ onAirBadge(s enums.ReleaseStatus) {
	if s == enums.ReleaseStatusOnAir {
		<label
			class="absolute z-10
					top-[1%] right-[1%] px-[5%]
					text-white font-bold text-base max-sm:text-xs
					bg-[#ef6d6d] shadow-[0_2px_4px_rgba(0,0,0,0.1)]
					rounded-lg border-solid border-2 border-[#ab2828]"
		>
			ON AIR
		</label>
	}
	/*
	else if s == model.ReleaseStatusIncompleted {
		<label
			class="absolute
					top-[1%] right-[1%] px-[5%]
					text-[#4341cc] font-bold text-xs max-sm:text-xs
					bg-[#fff27d] shadow-[0_2px_4px_rgba(0,0,0,0.1)]
					rounded-lg border-solid border-2 border-[#cfc566]"
		>
			INCOMPLETED
		</label>
	}
	*/
}

templ categoryBadge(category string) {
	if len(category) > 0 {
		<label
			class="absolute
			top-0 left-[5%] px-[5%] 
			text-white font-bold text-xs max-sm:text-xxs
			bg-[#3c36dd] shadow-[0_2px_4px_rgba(0,0,0,0.1)] 
			rounded-b-lg border-solid border-2 border-[#423cf1]"
		>
			{ category }
		</label>
	}
}

// Recursive template
// Child of templ:  storage.templ
// Render from Api: /api/cards
templ CollectionListingBatch(cards []model.ItemCartData, nextPageEndpint, nextPageParams string, bAutoloadNextPage bool, currentPage int) {
	for i, card := range cards {
		<div
			class="flex flex-col shadow-[0_2px_4px_rgba(0,0,0,0.1)] rounded-lg border-solid border-[#ddd]
						bg-white dark:bg-gray-700
		"
		>
			@putPageNumberResetTrigger(currentPage, i, len(cards)) {
				@CardItemData(&card)
			}
		</div>
	}
	if len(cards) > 0 && bAutoloadNextPage {
		@Trigger(nextPageEndpint, nextPageParams)
	}
}

templ CardItemData(card *model.ItemCartData) {
	// gallery with images
	<div
		class="box-border p-4"
		hx-trigger="intersect once threshold:0"
		hx-on:htmx:trigger={ scripts.LoadGallery(templ.JSExpression("this")) }
	>
		<div class="relative box-border h-[360px] m-auto max-w-[650px] overflow-hidden">
			@categoryBadge(card.CategoryPresentation)
			@onAirBadge(card.ReleaseStatus)
			for i := 0; i < len(card.AnimeLayerRefs);i++ {
				<img
					original_src={ queryPosterFromItem(card.AnimeLayerRefs[i]) }
					src={ noImagePlaceholder }
					alt={ card.Title }
					hx-trigger="intersect once"
					hx-on:htmx:trigger={ scripts.LazyLoadImage(templ.JSExpression("this")) }
					class="object-scale-down box-border w-[240px] h-[360px] object-top mr-2"
				/>
			}
		</div>
	</div>
	// horizontal row with update datas
	<div
		class="grid grid-flow-col auto-cols-max p-px px-4 border-t-2 border-b-2
	border-gray-300 dark:border-gray-800"
	>
		if len(card.UpdatedDate) > 0 {
			@optionalLineMetaData("Обновлен:", card.UpdatedDate)
		} else {
			@optionalLineMetaData("Добавлен:", card.CreatedDate)
		}
		@optionalLineMetaData("", card.TorrentWeight, true)
	</div>
	// title
	<div class="flex px-4 pb-2 pt-3 text-lg font-semibold place-self-stretch select-none">
		//<a href={ templ.URL(card.AnimeLayerRef) } rel="noopener noreferrer">
		{ card.Title }
		//</a>
	</div>
	// Description
	<div class="flex flex-col px-4 pb-2 pt-2 text-sm font-sans font-normal">
		{{ descr := card.AnimeLayerRefs[0].Description }}
		if len(descr.Type) > 0 {
			<div>
				<b>Тип: </b><span>{ descr.Type }</span>
			</div>
		}
		if len(descr.Type) > 0 {
			<div>
				<b>Жанр: </b><span>{ strings.Join(descr.Genres, ", ") }</span>
			</div>
		}
		if len(descr.Type) > 0 {
			<div>
				<b>Год выпуска: </b><span>{ descr.Year }</span>
			</div>
		}
		if len(descr.Type) > 0 {
			<div>
				<b>Кол-во серий: </b><span>{ descr.EpisodeCount }</span>
			</div>
		}
		if len(descr.Type) > 0 {
			<div>
				<b>Продолжительность: </b><span>{ descr.EpisodeDuration }</span>
			</div>
		}
		if len(descr.Type) > 0 {
			<br/>
			<div>
				<b>Торрент был обновлен</b>
				<br/>
				<span>{ descr.UpdateReaseon }</span>
			</div>
		}
	</div>
	// horizontal row with image and description
	<div class="p-4 flex flex-col">
		for _, animeLayerRef := range card.AnimeLayerRefs {
			<a
				href={ templ.URL(animeLayerRef.Href) }
				rel="noopener noreferrer"
				class="mt-2 flex flex-row"
			>
				<img
					src={ animeLayerLogo }
					alt={ card.Title }
					class="w-[51px] h-[18px] object-scale-down object-top"
				/>
				<div class="flex flex-col">
					for _, text := range animeLayerRef.Text {
						<span class="text-blue-600 -translate-y-1 translate-x-2 text-pretty text-xs">{ text }</span>
					}
				</div>
			</a>
		}
	</div>
}
