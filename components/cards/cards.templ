package cards

import (
	"github.com/dmji/gosudarevlist/components/scripts"
	"github.com/dmji/gosudarevlist/pkg/apps/presenter/model"
)

const noImagePlaceholder = "/assets/images/no_image.webp"

func queryPosterFromItem(description *model.ItemCartData) string {

	if img := description.Image; len(img) > 0 {
		return img
	}

	return noImagePlaceholder
}

templ optionalLineMetaData(title, value string, bLast ...bool) {
	if len(value) > 0 && len(bLast) == 0 {
		<div class="text-gray-400 text-sm">{ title }</div>
	}
	if len(value) > 0 {
		<div class="px-1 text-sm">{ value }</div>
	}
	if len(value) > 0 && len(bLast) == 0 {
		<span class="px-1 text-sm">| </span>
	}
}

templ onAirBadge(s model.ReleaseStatus) {
	if s == model.ReleaseStatusOnAir {
		<label
			class="absolute
					top-[1%] right-[1%] px-[5%]
					text-white font-bold text-base max-sm:text-xs
					bg-[#ef6d6d] shadow-[0_2px_4px_rgba(0,0,0,0.1)]
					rounded-lg border-solid border-2 border-[#ab2828]"
		>
			ON AIR
		</label>
	}
	/*
	else if s == model.ReleaseStatusIncompleted {
		<label
			class="absolute
					top-[1%] right-[1%] px-[5%]
					text-[#4341cc] font-bold text-xs max-sm:text-xs
					bg-[#fff27d] shadow-[0_2px_4px_rgba(0,0,0,0.1)]
					rounded-lg border-solid border-2 border-[#cfc566]"
		>
			INCOMPLETED
		</label>
	}
	*/
}

templ categoryBadge(category string) {
	if len(category) > 0 {
		<label
			class="absolute
			top-0 left-[5%] px-[5%] 
			text-white font-bold text-xs max-sm:text-xxs
			bg-[#3c36dd] shadow-[0_2px_4px_rgba(0,0,0,0.1)] 
			rounded-b-lg border-solid border-2 border-[#423cf1]"
		>
			{ category }
		</label>
	}
}

// Recursive template
// Child of templ:  storage.templ
// Render from Api: /api/cards
templ CollectionListingBatch(cards []model.ItemCartData, nextPageEndpint, nextPageParams string, bAutoloadNextPage bool, currentPage int) {
	for i, card := range cards {
		<div class="flex flex-col bg-[white] shadow-[0_2px_4px_rgba(0,0,0,0.1)] rounded-lg border-solid border-[#ddd]">
			@putPageNumberResetTrigger(currentPage, i, len(cards)) {
				// title
				<div class="flex px-4 pb-2 pt-3 text-lg font-semibold place-self-stretch select-none">
					<a href={ templ.URL(card.AnimeLayerRef) } rel="noopener noreferrer">
						{ card.Title }
					</a>
				</div>
				// horizontal row with update datas
				<div class="grid grid-flow-col auto-cols-max p-px px-4 border-t-2 border-b-2">
					if len(card.UpdatedDate) > 0 {
						@optionalLineMetaData("Обновлен:", card.UpdatedDate)
					} else {
						@optionalLineMetaData("Добавлен:", card.CreatedDate)
					}
					@optionalLineMetaData("", card.TorrentWeight, true)
				</div>
				// horizontal row with image and description
				<div class="grid grid-flow-col place-content-start">
					<div class="w-fit pt-4 pl-4">
						<div class="relative">
							@categoryBadge(card.CategoryPresentation)
							@onAirBadge(card.ReleaseStatus)
							<img
								original_src={ queryPosterFromItem(&card) }
								src={ noImagePlaceholder }
								alt={ card.Title }
								hx-trigger="intersect once"
								hx-on::trigger={ scripts.LazyLoadImage(templ.JSExpression("this")) }
								class="w-[240px] h-[360px] object-scale-down object-top"
							/>
						</div>
					</div>
					<div class="p-4 text-sm font-sans font-normal inline-block whitespace-pre truncate">
						@templ.Raw(card.Description, nil)
					</div>
				</div>
			}
		</div>
	}
	if len(cards) > 0 && bAutoloadNextPage {
		@Trigger(nextPageEndpint, nextPageParams)
	}
}
