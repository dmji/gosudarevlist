package cards

import (
	"collector/components/scripts"
	"collector/pkg/recollection/model"
)

const noImagePlaceholder = "/assets/no_image.jpg"

func queryPosterFromItem(description *model.ItemCartData) string {

	if img := description.Image; len(img) > 0 {
		return img
	}

	return noImagePlaceholder
}

templ putPageNumberResetTrigger(currentPage, i int, cards []model.ItemCartData) {
	if i == int(float64(len(cards))*0.25) {
		<div
			class="group"
			hx-trigger="intersect"
			hx-on::trigger={ scripts.QueryUpdatePage(currentPage) }
		>
			{ children... }
		</div>
	} else {
		<div
			class="group"
		>
			{ children... }
		</div>
	}
}

templ ListItemRenderTrigger(nextPageEndpint, nextPageParams string) {
	<div
		hx-boost="true"
		hx-get={ nextPageEndpint + nextPageParams }
		hx-trigger="revealed"
		hx-swap="outerHTML"
		class="pt-96"
	></div>
}

templ optionalLineMetaData(title, value string) {
	if len(value) > 0 {
		<div class="text-gray-400">{ title }</div>
		<div class="px-1">{ value }</div>
		<span class="px-1">| </span>
	}
}

templ onAirBadge(IsCompleted bool) {
	if !IsCompleted {
		<label class="top-5 max-sm:top-1.5 right-4 px-3 absolute place-self-center text-white font-bold bg-[#ef6d6d] shadow-[0_2px_4px_rgba(0,0,0,0.1)] rounded-lg border-solid border-2 border-[#ab2828]">
			ON AIR
		</label>
	}
}

templ categoryBadge(category string) {
	if len(category) > 0 {
		<label class="top-[13px] left-4 px-3 absolute text-white text-xs font-bold bg-[#3c36dd] shadow-[0_2px_4px_rgba(0,0,0,0.1)] rounded-b-lg border-solid border-2 border-[#423cf1]">
			{ category }
		</label>
	}
}

// Recursive template
// Child of templ:  storage.templ
// Render from Api: /api/cards
templ ListItem(cards []model.ItemCartData, nextPageEndpint, nextPageParams string, bAutoloadNextPage bool, currentPage int) {
	for i, card := range cards {
		<div class="flex flex-col bg-[white] shadow-[0_2px_4px_rgba(0,0,0,0.1)] rounded-lg border-solid border-[#ddd]">
			@putPageNumberResetTrigger(currentPage, i, cards) {
				// title
				<div class="flex p-4 text-xl font-semibold place-self-stretch">
					<a href={ templ.URL(card.AnimeLayerRef) } rel="noopener noreferrer">
						{ card.Title }
					</a>
				</div>
				// horizontal row with update datas
				<div class="grid grid-flow-col auto-cols-max p-px px-4 border-t-2 border-b-2">
					@optionalLineMetaData("Добавлен:", card.CreatedDate)
					@optionalLineMetaData("Обновлен:", card.UpdatedDate)
					<div class="px-1">{ card.TorrentWeight }</div>
				</div>
				// horizontal row with image and description
				<div class="grid grid-flow-col place-content-start">
					<div class="relative">
						@categoryBadge(card.CategoryPresentation)
						@onAirBadge(card.IsCompleted)
						<img
							original_src={ queryPosterFromItem(&card) }
							src={ noImagePlaceholder }
							alt={ card.Title }
							hx-trigger="intersect once"
							hx-on::trigger={ scripts.LazyLoadImage(templ.JSExpression("this")) }
							class="w-full h-[385px] mt-0 max-sm:h-1/2 object-scale-down"
						/>
					</div>
					<div class="p-4 text-sm font-sans font-normal inline-block whitespace-pre truncate">
						@templ.Raw(card.Description, nil)
					</div>
				</div>
			}
		</div>
	}
	if len(cards) > 0 && bAutoloadNextPage {
		@ListItemRenderTrigger(nextPageEndpint, nextPageParams)
	}
}
