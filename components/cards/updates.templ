package cards

import (
	"github.com/dmji/gosudarevlist/components/svg"
	"github.com/dmji/gosudarevlist/pkg/apps/presenter/model"
	"github.com/dmji/gosudarevlist/pkg/enums"
	"github.com/dmji/gosudarevlist/pkg/time_formater.go"
	"time"
)

templ CollectionUpdatesBatch(items []model.UpdateItem, nextPageEndpint, nextPageParams string, bAutoloadNextPage bool, currentPage int) {
	for i, item := range items {
		@putPageNumberResetTrigger(currentPage, i, len(items)) {
			<li class="p-2">
				<div class="flex items-center space-x-4 rounded-md">
					@statusBadgeFromText(item.UpdateStatus, item.Date)
					<span class="text-sm">{ item.Title }</span>
					//<span class="text-sm text-gray-500 cursor-help" title={ item.Identifier }>ℹ️</span>
				</div>
				if len(item.Notes) > 0 {
					for _, change := range item.Notes {
						<ul class="pl-8 mt-1">
							<i class="text-xs text-gray-500">
								{ change.ValueTitle.Presentation(ctx) }
							</i>
							@fillItemChange(change)
						</ul>
					}
				}
			</li>
		}
	}
	if len(items) > 0 && bAutoloadNextPage {
		@Trigger(nextPageEndpint, nextPageParams)
	}
}

func statusToColorClasses(status enums.UpdateStatus) string {
	switch status {
	case enums.UpdateStatusNew:
		return `border
		text-green-700  dark:text-green-400 
		border-green-700 dark:border-green-400`
	case enums.UpdateStatusRemoved:
		return `border
		text-red-800 dark:text-red-400
		border-red-800 dark:border-red-400`
	case enums.UpdateStatusUpdated:
		return `border
		text-yellow-500 dark:text-yellow-300
		border-yellow-500 dark:border-yellow-300`
	default:
		return ""
	}
}

templ statusBadgeFromText(status enums.UpdateStatus, date *time.Time) {
	<div class={ "text-xs font-medium py-0.5 rounded w-20 justify-center text-center" + " " + statusToColorClasses(status) }>
		<div>
			{ status.Presentation(ctx) }
			<br/>
		</div>
		<div class="text-xxs">
			{ time_formater.Format(ctx, date) }
		</div>
	</div>
}

templ fillItemChange(change model.UpdateItemNote) {
	if len(change.ValueOld) > 0  && len(change.ValueNew) > 0 {
		<li class="grid grid-cols-2 max-lg:grid-cols-1">
			<div
				class="flex overflow-hidden 
						rounded-l-xl max-lg:rounded-t-xl max-lg:rounded-b-none"
			>
				<div
					class="px-2 py-2
				 bg-red-300 dark:bg-red-900"
				>
					@svg.ChangeStatus(false)
				</div>
				<div
					class="text-xs px-2 py-1 flex-grow content-center
				bg-red-200 dark:bg-red-800"
				>
					@templ.Raw(change.ValueOld)
				</div>
			</div>
			<div
				class="ml-1 max-lg:ml-0 flex overflow-hidden 
						rounded-r-lg xl max-lg:rounded-b-xl max-lg:rounded-t-none"
			>
				<div
					class="px-2 py-2
				bg-green-400 dark:bg-green-800"
				>
					@svg.ChangeStatus(true)
				</div>
				<div
					class="text-xs px-2 py-1 flex-grow content-center
				bg-green-200 dark:bg-green-700"
				>
					@templ.Raw(change.ValueNew)
				</div>
			</div>
		</li>
	} else if len(change.ValueOld) > 0 {
		<li class="flex overflow-hidden rounded-xl">
			<div
				class="px-2 py-2
			 bg-red-300 dark:bg-red-900"
			>
				@svg.ChangeStatus(false)
			</div>
			<div
				class="text-xs px-2 py-1 flex-grow content-center
			bg-red-200 dark:bg-red-800"
			>
				@templ.Raw(change.ValueOld)
			</div>
		</li>
	} else if len(change.ValueNew) > 0 {
		<li class="flex overflow-hidden rounded-xl">
			<div
				class="px-2 py-2
			 bg-green-400 dark:bg-green-800"
			>
				@svg.ChangeStatus(true)
			</div>
			<div
				class="text-xs px-2 py-1 flex-grow content-center
			bg-green-200 dark:bg-green-700"
			>
				@templ.Raw(change.ValueNew)
			</div>
		</li>
	}
}
