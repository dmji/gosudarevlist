package cards

import (
	"context"
	"github.com/dmji/gosudarevlist/components/svg"
	"github.com/dmji/gosudarevlist/pkg/recollection/model"
	"github.com/dmji/gosudarevlist/pkg/time_ru_format.go"
	"time"
)

templ CollectionUpdatesBatch(ctx context.Context, items []model.UpdateItem, nextPageEndpint, nextPageParams string, bAutoloadNextPage bool, currentPage int) {
	for _, item := range items {
		//@putPageNumberResetTrigger(currentPage, i, len(items)) {
		<li class="p-2">
			<div class="flex items-center space-x-4 rounded-md">
				@statusBadgeFromText(ctx, item.UpdateStatus, item.Date)
				<span class="text-sm">{ item.Title }</span>
				//<span class="text-sm text-gray-500 cursor-help" title={ item.Identifier }>ℹ️</span>
			</div>
			if len(item.Notes) > 0 {
				for _, change := range item.Notes {
					<ul class="pl-8 mt-1">
						<i class="text-xs text-gray-500">
							{ change.ValueTitle.Presentation(ctx) }
						</i>
						@fillItemChange(change)
					</ul>
				}
			}
		</li>
		//}
	}
	if len(items) > 0 && bAutoloadNextPage {
		@Trigger(nextPageEndpint, nextPageParams)
	}
}

func statusToColorClasses(status model.UpdateStatus) string {
	switch status {
	case model.UpdateStatusNew:
		return "bg-green-100 text-green-800 dark:bg-gray-700 dark:text-green-400 border border-green-400"
	case model.UpdateStatusRemoved:
		return "bg-red-100 text-red-800  dark:bg-gray-700 dark:text-red-400 border border-red-400"
	case model.UpdateStatusUpdated:
		return "bg-yellow-100 text-yellow-800 dark:bg-gray-700 dark:text-yellow-300 border border-yellow-300"
	default:
		return ""
	}
}

templ statusBadgeFromText(ctx context.Context, status model.UpdateStatus, date *time.Time) {
	<div class={ "text-xs font-medium py-0.5 rounded w-20 justify-center text-center" + " " + statusToColorClasses(status) }>
		<div>
			{  status.Presentation(ctx) }
			<br/>
		</div>
		<div class="text-xxs">
			{ time_ru_format.Format(date) }
		</div>
	</div>
}

templ fillItemChange(change model.UpdateItemNote) {
	if len(change.ValueOld) > 0  && len(change.ValueNew) > 0 {
		<li class="flex overflow-hidden rounded-t-xl">
			<div class="px-2 py-2 bg-red-300">
				@svg.ChangeStatus(false)
			</div>
			<div class="text-xs  px-2 py-1 flex-grow bg-red-200 content-center ">
				@templ.Raw(change.ValueOld)
			</div>
		</li>
		<li class="flex overflow-hidden rounded-b-xl">
			<div class="px-2 py-2 bg-green-400">
				@svg.ChangeStatus(true)
			</div>
			<div class="text-xs px-2 py-1 flex-grow bg-green-200 content-center">
				@templ.Raw(change.ValueNew)
			</div>
		</li>
	} else if len(change.ValueOld) > 0 {
		<li class="flex overflow-hidden rounded-xl">
			<div class="px-2 py-2 bg-red-300">
				@svg.ChangeStatus(false)
			</div>
			<div class="text-xs px-2 py-1 flex-grow bg-red-200 content-center">
				@templ.Raw(change.ValueOld)
			</div>
		</li>
	} else if len(change.ValueNew) > 0 {
		<li class="flex overflow-hidden rounded-xl">
			<div class="px-2 py-2 bg-green-400">
				@svg.ChangeStatus(true)
			</div>
			<div class="text-xs px-2 py-1 flex-grow bg-green-200 content-center">
				@templ.Raw(change.ValueNew)
			</div>
		</li>
	}
}
