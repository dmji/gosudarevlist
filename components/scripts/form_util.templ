package scripts 

script RequestSubmitParentForm(obj templ.JSExpression) {
	if(!obj.srcElement.attributes.hasOwnProperty("type") || obj.srcElement.attributes['type'].value != "checkbox")
	{
		return 
	}
	obj.srcElement.form.requestSubmit(null)
}

script InputTextboxLiveUpdate(target templ.JSExpression) {
	target.form.requestSubmit(null)

	/* 
	let inputValue = this.value.trim();
	let lastTime = performance.now();

	if (timerId) {
		clearTimeout(timerId);
	}

	timerId = setTimeout(function() {
		if (performance.now() - lastTime > 1500 && inputValue) {
			console.log('Send', inputValue);
		}
	}, 1500);
	 */
}

script LazyLoadImage(target templ.JSExpression) {

	// Создаем новый Image объект
	const newImage = new Image();
	const src = target.getAttribute('original_src')
	newImage.src = src;

	// После полной загрузки нового изображения заменяем старое
	newImage.onload = () => {
		target.src = src;
	};

	// Если загрузка изображения завершается ошибкой, показываем сообщение об этом
	newImage.onerror = () => {
		console.error(`Не удалось загрузить изображение ${src}`);
	};

}

script InitFilterPanel(searchBarId, filtersPanelId string) {
	if(localStorage.getItem("show_filters") == 1) {
		document.querySelector('#'+searchBarId).classList.toggle('rounded-b-none')
		document.querySelector('#'+filtersPanelId).classList.toggle('hidden')
	} else {
		localStorage.setItem("show_filters", 0);
	}
}

script ToggleFilterPanel(searchBarId, filtersPanelId string) {
	document.querySelector('#'+searchBarId).classList.toggle('rounded-b-none')
	document.querySelector('#'+filtersPanelId).classList.toggle('hidden')
	localStorage.setItem("show_filters", localStorage.getItem("show_filters") == 1 ? 0 : 1);
}
